{
  "name": "skipper",
  "version": "0.1.8",
  "description": "Bodyparser for Express/Sails. Exposes simple API for streaming multiple files to disk, S3, etc. without buffering to a .tmp directory.",
  "main": "index.js",
  "directories": {},
  "scripts": {
    "test": "mocha && node -e \"require('skipper-adapter-tests')({module: require('skipper-disk')});\""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/balderdashy/file-parser.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "keywords": [
    "bodyparser",
    "upload",
    "sails",
    "express",
    "connect",
    "streaming",
    "file-upload"
  ],
  "author": {
    "name": "Mike McNeil"
  },
  "contributors": [
    {
      "name": "Scott Gress"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "multiparty": "~3.2.2",
    "async": "~0.2.10",
    "dot-access": "0.0.3",
    "string_decoder": "~0.10.25-1",
    "lodash": "~2.4.1",
    "colors": "~0.6.2",
    "semver": "~2.2.1",
    "connect": "~2.15.0",
    "skipper-disk": "~0.2.6",
    "guid": "0.0.12"
  },
  "devDependencies": {
    "fs-extra": "~0.8.1",
    "temporary": "0.0.8",
    "request": "~2.33.0",
    "concat-stream": "~1.4.1",
    "sails": "~0.10.0",
    "mocha": "~1.18.2",
    "express": "~4.1.1",
    "skipper-adapter-tests": "~1.1.5"
  },
  "readme": "# [![Skipper](http://i.imgur.com/P6gptnI.png)](https://github.com/balderdashy/skipper)\n\n[![NPM version](https://badge.fury.io/js/skipper.png)](http://badge.fury.io/js/skipper) &nbsp; &nbsp;\n[![Build Status](https://travis-ci.org/balderdashy/skipper.svg?branch=master)](https://travis-ci.org/balderdashy/skipper)\n\n### Streaming Multipart File Upload Parsing \n\nSkipper is an opinionated variant of Connect's body parser designed to support the streaming upload of monolithic files to a compatible blob receiver, while still allowing application code to run in a timely manner.  It allows you to access textual metadata in the request body of multipart HTTP requests (ie. JSON/XML/urlencoded request body parameters) but still get streaming access to incoming files without writing .tmp files to disk.\n\n> This module ~~may~~ **will** be included as a part of the stable release of Sails v0.10.  However we need help with documentation, examples, and writing additional receivers (currently receivers for S3 and local disk exist.)\n> The decision to include skipper in v0.10 was tough-- it has stalled our release.  However, it was a consequence of rewriting this module to use streams2, as well as the spotty/fragmented/confusing state of file uploads around the community.  We hope this module helps clear things up for everybody.\n\n\n\n### Installation\n\n```sh\nnpm install skipper --save\n```\n\n> Skipper is installed in Sails automatically.  To install it into another Connect-based app (i.e. Express):\n>\n> ```js\n> app.use(require('skipper')());\n> ```\n\n\n### Quick Start\n\n> ##### Important\n>\n> Skipper is able to transparently stream your app's file uploads to any of its compatible receivers thanks to a crucial, > simplifying assumption: that all **text parameters** will be sent _before_ any **file parameters**.\n\n\n#### Stream file(s) to disk\n\nThe following example receives a file from a **file parameter** named `avatar`, then streams it `.tmp/test.jpg` on the server's local disk:\n\n```js\n// ...\nreturn req.file('foobar').upload('./.tmp/test.jpg', function onUploadComplete (err, uploadedFiles) {\n  // ...\n});\n```\n\nTo use dynamic filenames (i.e. whatever the name of the original file was), and still contain files within a particular directory (defaults to `.tmp/uploads/` relative to the current working directory):\n\n```js\n// ...\nreturn req.file('foobar').upload(function onUploadComplete (err, uploadedFiles) {\n  // ...\n});\n```\n\n\n#### Stream file(s) somewhere else\n\nAlternatively, to upload the file with any receiver other than the default [`skipper-disk`](http://github.com/balderdashy/skipper-disk):\n\n```js\n// ...\nvar SkipperS3 = require('skipper-s3')({ key: '...', secret: '...', bucket: '...' });\nvar receiving = SkipperS3.receive();\nreturn req.file('foobar').upload(receiving, function onUploadComplete (err, uploadedFiles) {\n  // ...\n});\n```\n\n\n\n#### With Sails (v0.10.0)\n\nAs of v0.10.0-rc6, skipper is installed as the default request body parser in Sails- you don't need to install it again.\n\n\n#### With Sails (v0.9.x)\n\nTo use skipper with an existing v0.9.x Sails app, you'll need to install skipper, then modify `config/express.js`:\n\n```javascript\nmodule.exports.express = {\n  bodyParser: require('skipper')\n};\n```\n\n#### With Express/Connect\n\nThis module is a drop-in replacement for the default Connect bodyParser, so if you're already using that bodyParser (`app.use(express.bodyParser)`), you'll need to replace it and hook up skipper instead.\n\ne.g. in the module where you set up your middleware:\n\n```javascript\n// ...\napp.use(require('skipper')());\n// ...\n```\n\n\n### Usage\n\n`req.file(foo)` returns a stream of binary streams- one for each file that was uploaded to the specified parameter (`foo`) via an HTTP multipart file upload.  As is true with most middleware, the usage is identical between Sails and Express.\n\n#### With Sails\n\nIn one of your controller actions:\n\n```javascript\n  // ...\n  upload: function  (req, res) {\n    req.file('avatar').upload(function (err, files) {\n      if (err) return res.serverError(err);\n      return res.json({\n        message: files.length + ' file(s) uploaded successfully!',\n        files: files\n      });\n    });\n  }\n  // ...\n```\n\n#### With Express\n\n```javascript\napp.post('/upload', function uploadAction (req, res) {\n  req.file('avatar').upload( function (err, files) {\n    if (err) return res.send(500, err);\n    return res.json({\n      message: files.length + ' file(s) uploaded successfully!',\n      files: files\n    });\n  });\n});\n```\n\n### Status\n\nThis module is published on npm.  Development takes place on the `master` branch.\n\n\n### More Resources\n\n- [Stackoverflow](http://stackoverflow.com/questions/tagged/sails.js)\n- [#sailsjs on Freenode](http://webchat.freenode.net/) (IRC channel)\n- [Twitter](https://twitter.com/sailsjs)\n- [Professional/enterprise](https://github.com/balderdashy/sails-docs/blob/master/FAQ.md#are-there-professional-support-options)\n- [Tutorials](https://github.com/balderdashy/sails-docs/blob/master/FAQ.md#where-do-i-get-help)\n- [Waterline (ORM)](http://github.com/balderdashy/waterline)\n- <a href=\"http://sailsjs.org\" target=\"_blank\" title=\"Node.js framework for building realtime APIs.\"><img src=\"https://github-camo.global.ssl.fastly.net/9e49073459ed4e0e2687b80eaf515d87b0da4a6b/687474703a2f2f62616c64657264617368792e6769746875622e696f2f7361696c732f696d616765732f6c6f676f2e706e67\" width=60 alt=\"Sails.js logo (small)\"/></a>\n\n\n### License\n\n**[MIT](./LICENSE)**\n&copy; 2014\n[Mike McNeil](http://michaelmcneil.com), [Scott Gress](https://github.com/sgress454), [Balderdash](http://balderdash.co) & contributors\n\nThis module is part of the [Sails framework](http://sailsjs.org), and is free and open-source under the [MIT License](http://sails.mit-license.org/).\n\n\n![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png) \n \n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/a22d3919de208c90c898986619efaa85 \"githalytics.com\")](http://githalytics.com/balderdashy/file-parser)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/balderdashy/file-parser/issues"
  },
  "homepage": "https://github.com/balderdashy/file-parser",
  "_id": "skipper@0.1.8",
  "_from": "skipper@~0.1.2"
}
