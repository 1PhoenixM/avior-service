{
  "name": "skipper-disk",
  "version": "0.2.6",
  "description": "Receive Skipper's file uploads on your local filesystem",
  "main": "index.js",
  "scripts": {
    "test": "node -e \"require('skipper-adapter-tests')({module: require('./')});\""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/balderdashy/skipper-disk.git"
  },
  "keywords": [
    "skipper",
    "filesystem",
    "file",
    "upload",
    "upload",
    "disk",
    "drive",
    "sails",
    "express"
  ],
  "author": {
    "name": "Mike McNeil"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/balderdashy/skipper-disk/issues"
  },
  "homepage": "https://github.com/balderdashy/skipper-disk",
  "devDependencies": {
    "skipper-adapter-tests": "~1.1.2"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "fs-extra": "~0.8.1"
  },
  "readme": "# [<img title=\"skipper-disk - Local disk adapter for Skipper\" src=\"http://i.imgur.com/P6gptnI.png\" width=\"200px\" alt=\"skipper emblem - face of a ship's captain\"/>](https://github.com/balderdashy/skipper-disk) Disk Blob Adapter\n\n[![NPM version](https://badge.fury.io/js/skipper-disk.png)](http://badge.fury.io/js/skipper-disk) &nbsp; &nbsp;\n[![Build Status](https://travis-ci.org/balderdashy/skipper-disk.svg?branch=master)](https://travis-ci.org/balderdashy/skipper-disk)\n\nLocal filesystem adapter for receiving streams of file streams. Particularly useful for streaming multipart file uploads via [Skipper](github.com/balderdashy/skipper).\n\n> This module is bundled as the default blob adapter in Skipper, and consequently [Sails](https://github.com/balderdashy/sails).\n\n========================================\n\n## Installation\n\n```\n$ npm install skipper-disk --save\n```\n\n========================================\n\n## Usage\n\nFirst instantiate a blob adapter (`blobAdapter`):\n\n```js\nvar blobAdapter = require('skipper-disk')();\n```\n\nBuild a receiver (`receiving`):\n\n```js\nvar receiving = blobAdapter.receive();\n```\n\nThen stream file(s) from a particular field (`req.file('foo')`):\n\n```js\nreq.file('foo').upload(receiving, function (err, filesUploaded) {\n  // ...\n});\n```\n\n========================================\n\n## Options\n\nAll options may be passed either into the blob adapter's factory method:\n\n```js\nvar blobAdapter = require('skipper-disk')({\n  // These options will be applied unless overridden.\n});\n```\n\nOr directly into a receiver:\n\n```js\nvar receiving = blobAdapter.receive({\n  // Options will be applied only to this particular receiver.\n});\n```\n\n\n| Option    | Type       | Details |\n|-----------|:----------:|---------|\n| `dirname`  | ((string)) | The path to the directory on disk where file uploads should be streamed.  May be specified as an absolute path (e.g. `/Users/mikermcneil/foo`) or a relative path from the current working directory.  Defaults to `\".tmp/uploads/\"`\n| `saveAs()`  | ((function)) | An optional function that can be used to define the logic for naming files. For example: <br/> `function (file) {return Math.random()+file.name;} });` <br/> By default, the filename of the uploaded file is used, including the extension (e.g. `\"Screen Shot 2014-05-06 at 4.44.02 PM.jpg\"`.  If a file already exists at `dirname` with the same name, it will be overridden. |\n\n\n========================================\n\n## Advanced Usage\n\n#### `upstream.pipe(receiving)`\n\nAs an alternative to the `upload()` method, you can pipe an incoming **upstream** returned from `req.file()` (a Readable stream of Readable binary streams) directly to the **receiver** (a Writable stream for Upstreams.)\n\n```js\nreq.file('foo').pipe(receiving);\n```\n\nThere is no performance benefit to using `.pipe()` instead of `.upload()`-- they both use streams2.  The `.pipe()` method is available merely as a matter of flexibility/chainability.  Be aware that `.upload()` handles the `error` and `finish` events for you; if you choose to use `.pipe()`, you will of course need to listen for these events manually:\n\n```js\nreq.file('foo')\n.on('error', function onError() { ... })\n.on('finish', function onSuccess() { ... })\n.pipe(receiving)\n```\n\n========================================\n\n## Contribute\n\nSee `CONTRIBUTING.md`.\n\n\n\n========================================\n\n### License\n\n**[MIT](./LICENSE)**\n&copy; 2013, 2014-\n\n[Mike McNeil](http://michaelmcneil.com), [Balderdash](http://balderdash.co) & contributors\n\nSee `LICENSE.md`.\n\nThis module is part of the [Sails framework](http://sailsjs.org), and is free and open-source under the [MIT License](http://sails.mit-license.org/).\n\n\n![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png)\n\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/a22d3919de208c90c898986619efaa85 \"githalytics.com\")](http://githalytics.com/balderdashy/sails.io.js)\n",
  "readmeFilename": "README.md",
  "_id": "skipper-disk@0.2.6",
  "_from": "skipper-disk@~0.2.6"
}
