{
  "name": "sails-rest",
  "version": "0.0.4",
  "description": "REST adapter for Sails.js",
  "main": "SailsRest.js",
  "scripts": {
    "test": "NODE_ENV=test node test/integration/runner.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zohararad/sails-rest.git"
  },
  "keywords": [
    "orm",
    "waterline",
    "sails",
    "sailsjs",
    "sails.js",
    "REST",
    "rest",
    "RESTful"
  ],
  "author": {
    "name": "Zohar Arad"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "async": "0.1.22",
    "express": "3.x",
    "lodash": "1.2.1",
    "restify": "2.6.0",
    "waterline-errors": "^0.10.0"
  },
  "devDependencies": {
    "mocha": "^1.10.0",
    "captains-log": "^0.11.8",
    "waterline-adapter-tests": "^0.10.0"
  },
  "waterlineAdapter": {
    "waterlineVersion": "^0.10.0",
    "interfaces": [
      "semantic",
      "queryable"
    ]
  },
  "readme": "![image_squidhome@2x.png](http://i.imgur.com/RIvu9.png) \n\n# SailsRest\n\nSails.js Waterline adapter for REST APIs\n\n## Installation\n\nInstall from NPM.\n\n```bash\n$ npm install sails-rest\n```\n\n## Compatibility\n\nsails-rest is compatible with Sails.js v0.9.0 and above.\n\n## Sails Configuration\n\nAdd the following config to the config/adapters.js file:\n\n```javascript\nmodule.exports.adapters = {\n\n  default: 'rest',\n\n  rest: {\n    module: 'sails-rest',\n    type: 'json',             // expected response type (json | string | http)\n    host: 'api.somewhere.io', // api host\n    port: 80,                 // api port\n    protocol: 'http',         // HTTP protocol (http | https)\n    pathname: '/api/v1'       // base api path\n    resource: null,           // resource path to use (overrides model name)\n    action: null,             // action to use for the given resource ([resource]/run)\n    query: {},                // query parameters to provide with all GET requests\n    methods: {                // overrides default HTTP methods used for each CRUD action\n      create: 'post',\n      find: 'get',\n      update: 'put',\n      destroy: 'del'\n    },\n    beforeFormatResult: function(result){return result},    // alter result prior to formatting\n    afterFormatResult: function(result){return result},     // alter result after formatting\n    beforeFormatResults: function(results){return results}, // alter results prior to formatting\n    afterFormatResults: function(results){return results},  // alter results after formatting\n    cache: {                  // optional cache engine\n      engine : require('someCacheEngine')\n    }\n  }\n\n};\n```\n\n## Caching\n\nTo cache API responses, you can add an object to the adapter's configuration with an attribute named `engine` that responds\nto the following methods:\n\n* `get(key)` - get cache key\n* `set(key, value)` - set value on key\n* `del(key)` - delete value identified by `key` from cache\n\nAn example caching configuration using LRU cache (`npm install --save lru-cache`) will look something like:\n\n```javascript\n// under config/cache.js\n\nvar LRU = require(\"lru-cache\"),\n    options = {\n      max: 500,\n      maxAge: 1000 * 10\n    },\n    cache = LRU(options);\nmodule.exports = cache;\n\n// under config/adapters.js\n\n  rest: {\n    module   : 'sails-rest',\n    cache    : {\n      engine : require('./cache')\n    }\n  }\n```\n\nCache keys are computed from the API request URLs. This means that each unique URL will have its own cache key.\n\nAt the moment, cache busting is done by exact key only. This means that if you fetch `/users` and then update\n`/users/1`, the cached objects under `/users` will not be purged to reflect your changes.\n\n## TODO\n\n* Improve cache busting\n* Add support for async cache engines (eg. redis_client)\n\n## Change Log\n\n### v0.0.3\n\n* Fixing issue where only a single set of connection settings were stored, not separate settings for each model.\n* Updating restler dependency to latest version.\n* Adhering to JSHint object dot notation reccomendation.\n* Making cache configurable per collection.\n* Reworking how requests are made. Now using a single method for making the request. Also allowing for specification of the method for each type of request and allowing overrides/defaults for resource action and query in the url.\n* Fixing error handling conditional.\n* Fixing issue with cloning of connection.\n* Fixing improper methodName and restMethod.\n* Allowing for destroying all items in collection as well as by query, instead of only id.\n* Expanding test application to better suit suite of Waterline tests.\n* Reworking result formatting.\n* Referencing GitHub repo for reslter due to bugs that cause errors with tests.\n* Decoding URL compontents for test support application.\n* Absstracting logic to allow for deletion and updates of multiple items.\n* Removing unused variable.\n* Converting REST client from \"restler\" to \"restify\" due to bugs with restler module.\n* Adding method to modify result before and after format and fixing formatResults method.\n* Allowing for formatting before and after both individual results and all results.\n* Expecting return value for result formatting functions.\n* Modifying README to reflect new config options.\n* Modifying README formatting to allow for better legibility on GitHub page.\n* Removing redundant config.\n\n## Contributors\n\n[Christopher M. Mitchell](https://github.com/divThis)\n\n## MIT License\n\nCopyright (c) 2013 Zohar Arad\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/zohararad/sails-rest/issues"
  },
  "homepage": "https://github.com/zohararad/sails-rest",
  "_id": "sails-rest@0.0.4",
  "dist": {
    "shasum": "98e75ad0b91a95ce04bc8e8cbf14f05ac02a674c"
  },
  "_from": "sails-rest@",
  "_resolved": "https://registry.npmjs.org/sails-rest/-/sails-rest-0.0.4.tgz"
}
