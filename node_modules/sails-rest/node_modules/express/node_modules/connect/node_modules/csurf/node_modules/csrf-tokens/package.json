{
  "name": "csrf-tokens",
  "description": "primary logic behind csrf tokens",
  "version": "2.0.0",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/expressjs/csrf-tokens"
  },
  "dependencies": {
    "rndm": "1",
    "scmp": "~0.0.3",
    "uid-safe": "1",
    "base64-url": "1"
  },
  "devDependencies": {
    "mocha": "1"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "readme": "\n# CSRF Tokens\n\nLogic behind CSRF token creation and verification.\nRead [Understanding-CSRF](http://www.jongleberry.com/understanding-csrf.html) for more information on CSRF.\nUse this module to create custom CSRF middleware and what not.\n\n## API\n\n```js\nvar tokens = require('csrf-tokens')(options)\n\nvar secret = tokens.secretSync()\nvar token = tokens.create(secret)\nvar valid = tokens.verify(secret, token)\n```\n\nOptions:\n\n- `secretLength: 24` - the byte length of the secret key\n- `saltLength: 8` - the string length of the salt\n- `tokensize: (secret, salt) => token` - a custom token creation function\n\n### tokens.secret([cb])\n\nAsynchronously create a new `secret` of length `secretLength`.\nIf `cb` is not defined, a promise is returned.\nYou don't have to use this.\n\n```js\ntokens.secret().then(function (secret) {\n\n})\n\ntokens.secret(function (err, secret) {\n\n})\n```\n\n### var secret = tokens.secretSync()\n\nSynchronous version of `tokens.secret()`\n\n### var token = tokens.token(secret)\n\nCreate a CSRF token based on a `secret`.\nThis is the token you pass to clients.\n\n### var valid = tokens.verify(secret, token)\n\nCheck whether a CSRF token is valid based on a `secret`.\nIf it's not valid, you should probably throw a `403` error.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/csrf-tokens/issues"
  },
  "homepage": "https://github.com/expressjs/csrf-tokens",
  "_id": "csrf-tokens@2.0.0",
  "dist": {
    "shasum": "0d61c4daf7d1d7216417655a9d5037b5d6dcff60"
  },
  "_from": "csrf-tokens@~2.0.0",
  "_resolved": "https://registry.npmjs.org/csrf-tokens/-/csrf-tokens-2.0.0.tgz"
}
